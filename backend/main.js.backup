const express = require('express');
const path = require('path');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const cookieParser = require('cookie-parser');
const multer = require('multer');
require('dotenv').config();

// Importar configuración de base de datos
const { connectDB } = require('./config/database');

// Importar rutas API
const rutasProductos = require('./rutas/api/productos');
const rutasVentas = require('./rutas/api/ventas');
const rutasAuth = require('./rutas/api/auth');

// Importar middlewares
const { verificarAuth, verificarAdmin } = require('./middleware/middlewareAuth');

// ============================================
// CREAR LA APLICACIÓN EXPRESS
// ============================================
const app = express();
const PORT = process.env.PORT || 3000;

// ============================================
// CONFIGURACIÓN DE MIDDLEWARES
// ============================================

// Seguridad
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
      scriptSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:", "blob:", "https:"],
      fontSrc: ["'self'", "https://fonts.gstatic.com"],
      connectSrc: ["'self'"],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'none'"],
    },
  },
  crossOriginEmbedderPolicy: false
}));

// CORS
app.use(cors({
  origin: ['http://localhost:5173', 'http://localhost:3000'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Cookies
app.use(cookieParser());

// Logging
if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev'));
}

// Parsing de requests
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ============================================
// CONFIGURACIÓN DE ARCHIVOS ESTÁTICOS
// ============================================

// Servir archivos estáticos desde las carpetas correctas
app.use('/css', express.static(path.join(__dirname, 'estaticos/css')));
app.use('/js', express.static(path.join(__dirname, 'estaticos/js')));
app.use('/img', express.static(path.join(__dirname, 'estaticos/img')));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Servir archivos estáticos generales
app.use('/estaticos', express.static(path.join(__dirname, 'estaticos')));

// Favicon
app.use('/favicon.png', express.static(path.join(__dirname, 'estaticos/images/favicon.png')));

// ============================================
// CONFIGURACIÓN DE EJS PARA VISTAS ADMIN
// ============================================

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'vista/admin'));

// ============================================
// CONFIGURACIÓN DE MULTER PARA SUBIDA DE ARCHIVOS
// ============================================

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/productos/');
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, 'producto-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Solo se permiten archivos de imagen'));
    }
  }
});

// ============================================
// RUTAS API REST (JSON)
// ============================================

app.use('/api/productos', rutasProductos);
app.use('/api/ventas', rutasVentas);
app.use('/api/auth', rutasAuth);

// ============================================
// RUTAS DE VISTAS EJS (ADMIN) -
// ============================================

// Ruta de login del admin
app.get('/admin/login', (req, res) => {
  const error = req.query.error;
  res.render('login', { error });
});

// Dashboard principal del admin
app.get('/admin/dashboard', verificarAuth, verificarAdmin, (req, res) => {
  res.render('dashboard', { 
    usuario: req.usuario,
    titulo: 'Dashboard - DATA DREAM'
  });
});

// Ruta para mostrar el formulario de nuevo producto
app.get('/admin/productos/nuevo', verificarAuth, verificarAdmin, (req, res) => {
  res.render('productos', {
    usuario: req.usuario,
    titulo: 'Nuevo Producto - DATA DREAM',
    accion: 'crear',
    producto: null,
    categorias: [
      { valor: 'ropa', texto: 'Ropa' },
      { valor: 'accesorios', texto: 'Accesorios' }
    ]
  });
});

// Ruta para mostrar el formulario de editar producto
app.get('/admin/productos/:id/editar', verificarAuth, verificarAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    
    // Obtener el producto desde la API
    const response = await fetch(`http://localhost:${PORT}/api/productos/${id}`);
    const data = await response.json();
    
    if (!data.exito) {
      return res.status(404).render('error', {
        usuario: req.usuario,
        error: { status: 404, message: 'Producto no encontrado' }
      });
    }
    
    res.render('productos', {
      usuario: req.usuario,
      titulo: 'Editar Producto - DATA DREAM',
      accion: 'editar',
      producto: data.datos,
      categorias: [
        { valor: 'ropa', texto: 'Ropa' },
        { valor: 'accesorios', texto: 'Accesorios' }
      ]
    });
    
  } catch (error) {
    console.error('Error al cargar producto para editar:', error);
    res.status(500).render('error', {
      usuario: req.usuario,
      error: { status: 500, message: 'Error interno del servidor' }
    });
  }
});

// Ruta para procesar el formulario de crear producto (POST)
app.post('/admin/productos', 
  verificarAuth, 
  verificarAdmin,
  upload.single('imagen'),
  async (req, res) => {
    try {
      console.log('📝 Creando nuevo producto...');
      console.log('📊 Datos recibidos:', req.body);
      console.log('📁 Archivo:', req.file ? req.file.filename : 'Sin archivo');

      // Preparar datos para la API
      const productData = {
        ...req.body
      };
      
      if (req.file) {
        productData.imagen = `/uploads/productos/${req.file.filename}`;
      }

      // Enviar a la API
      const response = await fetch(`http://localhost:${PORT}/api/productos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(productData)
      });

      const result = await response.json();

      if (result.exito) {
        res.redirect('/admin/dashboard?success=Producto creado exitosamente');
      } else {
        res.render('productos', {
          usuario: req.usuario,
          titulo: 'Nuevo Producto - DATA DREAM',
          accion: 'crear',
          producto: null,
          categorias: [
            { valor: 'ropa', texto: 'Ropa' },
            { valor: 'accesorios', texto: 'Accesorios' }
          ],
          error: result.mensaje,
          errores: result.errores
        });
      }
    } catch (error) {
      console.error('Error al crear producto:', error);
      res.status(500).render('error', {
        usuario: req.usuario,
        error: { status: 500, message: 'Error interno del servidor' }
      });
    }
  }
);

// Ruta para procesar el formulario de editar producto (POST)
app.post('/admin/productos/:id', 
  verificarAuth, 
  verificarAdmin,
  upload.single('imagen'),
  async (req, res) => {
    try {
      const { id } = req.params;
      console.log(`📝 Editando producto: ${id}`);
      console.log('📊 Datos recibidos:', req.body);
      console.log('📁 Archivo:', req.file ? req.file.filename : 'Sin archivo nuevo');

      // Preparar datos para la API
      const productData = {
        ...req.body
      };
      
      if (req.file) {
        productData.imagen = `/uploads/productos/${req.file.filename}`;
      }

      // Enviar a la API
      const response = await fetch(`http://localhost:${PORT}/api/productos/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(productData)
      });

      const result = await response.json();

      if (result.exito) {
        res.redirect('/admin/dashboard?success=Producto actualizado exitosamente');
      } else {
        // Recargar el producto en caso de error
        const productResponse = await fetch(`http://localhost:${PORT}/api/productos/${id}`);
        const productData = await productResponse.json();
        
        res.render('productos', {
          usuario: req.usuario,
          titulo: 'Editar Producto - DATA DREAM',
          accion: 'editar',
          producto: productData.exito ? productData.datos : null,
          categorias: [
            { valor: 'ropa', texto: 'Ropa' },
            { valor: 'accesorios', texto: 'Accesorios' }
          ],
          error: result.mensaje,
          errores: result.errores
        });
      }
    } catch (error) {
      console.error('Error al editar producto:', error);
      res.status(500).render('error', {
        usuario: req.usuario,
        error: { status: 500, message: 'Error interno del servidor' }
      });
    }
  }
);

// Procesamiento del login admin
app.post('/admin/login', async (req, res) => {
  const { email, password } = req.body;
  
  // Validación simple para desarrollo
  if (email === 'admin@datadream.com' && password === 'admin123') {
    // Configurar cookie temporal
    res.cookie('admin-token', 'desarrollo-token', {
      httpOnly: true,
      maxAge: 24 * 60 * 60 * 1000
    });
    res.redirect('/admin/dashboard');
  } else {
    res.redirect('/admin/login?error=Credenciales incorrectas');
  }
});

// Logout admin
app.post('/admin/logout', (req, res) => {
  res.clearCookie('admin-token');
  res.redirect('/admin/login');
});

app.get('/admin/logout', (req, res) => {
  res.clearCookie('admin-token');
  res.redirect('/admin/login');
});

// ============================================
// RUTA PARA INFORMACIÓN DEL SISTEMA
// ============================================

app.get('/', (req, res) => {
  res.json({
    mensaje: 'DATA DREAM Backend API',
    version: '1.0.0',
    autor: 'Yamila Sueldo',
    frontend: 'http://localhost:5173',
    admin: 'http://localhost:3000/admin/login',
    api: {
      productos: '/api/productos',
      ventas: '/api/ventas',
      auth: '/api/auth'
    },
    estado: 'funcionando'
  });
});

// ============================================
// MANEJO DE ERRORES
// ============================================

// Middleware de manejo de errores de multer
app.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({
        exito: false,
        mensaje: 'El archivo es demasiado grande. Máximo 5MB'
      });
    }
  }
  
  if (error.message === 'Solo se permiten archivos de imagen') {
    return res.status(400).json({
      exito: false,
      mensaje: error.message
    });
  }

  next(error);
});

// Middleware general de manejo de errores
app.use((err, req, res, next) => {
  console.error(err.stack);
  
  if (req.path.startsWith('/api/')) {
    // Error para API (JSON)
    res.status(err.status || 500).json({
      exito: false,
      mensaje: err.message || 'Error interno del servidor',
      ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
    });
  } else if (req.path.startsWith('/admin/')) {
    // Error para vistas admin (HTML/EJS)
    res.status(err.status || 500).render('error', {
      error: err,
      mensaje: err.message || 'Error interno del servidor'
    });
  } else {
    // Para otras rutas
    res.status(404).json({
      exito: false,
      mensaje: 'Ruta no encontrada',
      sugerencia: 'Frontend en http://localhost:5173'
    });
  }
});

// ============================================
// INICIALIZACIÓN DEL SERVIDOR
// ============================================

const startServer = async () => {
  try {
    // Conectar a la base de datos
    await connectDB();
    
    // Crear directorios necesarios si no existen
    const fs = require('fs');
    const directorios = [
      path.join(__dirname, 'uploads/productos'),
      path.join(__dirname, 'estaticos/css'),
      path.join(__dirname, 'estaticos/js'),
      path.join(__dirname, 'estaticos/images'),
      path.join(__dirname, 'vista/admin')
    ];
    
    directorios.forEach(dir => {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
    });
    
    // Iniciar servidor
    app.listen(PORT, () => {
      console.log(`
🚀 Servidor DATA DREAM iniciado en puerto ${PORT}
📍 Rutas disponibles:
   
   🌐 FRONTEND (React): http://localhost:5173/
   ⚙️  BACKEND (API): http://localhost:${PORT}/
   🔐 ADMIN: http://localhost:${PORT}/admin/login
   
   🔌 API REST:
   - GET  /api/productos
   - POST /api/ventas  
   - POST /api/auth/login
   
🛠️  Modo: ${process.env.NODE_ENV || 'development'}
💾 Base de datos: Conectada
      `);
    });
  } catch (error) {
    console.error('❌ Error al iniciar el servidor:', error);
    process.exit(1);
  }
};

startServer();