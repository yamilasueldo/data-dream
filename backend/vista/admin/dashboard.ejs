<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= titulo || 'Dashboard - DATA DREAM' %></title>
    <link rel="stylesheet" href="/css/admin-dashboard.css">
    <link rel="icon" type="image/png" href="/favicon.png">
    
</head>
<body>
    <!-- Header -->
    <header class="admin-header">
        <div class="admin-header-content">
            <div class="admin-brand">
                <img src="/favicon.png" alt="DATA DREAM" class="admin-logo">
                <div>
                    <h1>DATA DREAM</h1>
                    <p>Panel de Administraci√≥n</p>
                </div>
            </div>
            
            <div class="admin-nav">
                <a href="/admin/dashboard" class="nav-link active">Dashboard</a>
                <a href="http://localhost:5173" class="nav-link" target="_blank">Ver Tienda</a>
            </div>
            
            <div class="admin-user">
                <span>üë§ <%= usuario.nombre %> <%= usuario.apellido %></span>
                <form action="/admin/logout" method="POST" style="display: inline;">
                    <button type="submit" class="logout-btn">Cerrar Sesi√≥n</button>
                </form>
            </div>
        </div>
    </header>

    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <h1>¬°Bienvenido, <%= usuario.nombre %>!</h1>
        <p>Panel de control de DATA DREAM</p>
    </div>

    <!-- Main Content -->
    <main class="admin-main">
        <div class="admin-container">
            
            <!-- Acci√≥n principal -->
            <div class="main-action">
                <div class="new-product-card">
                    <div class="card-icon">
                        <span class="action-icon">‚ûï</span>
                    </div>
                    <div class="card-content">
                        <h2>Agregar Nuevo Producto</h2>
                        <p>A√±ade un nuevo producto a tu cat√°logo con toda la informaci√≥n necesaria</p>
                        <a href="/admin/productos/nuevo" class="btn-primary-large">
                            Crear Producto
                        </a>
                    </div>
                </div>
            </div>

            <!-- Listado de Productos -->
            <div class="productos-section">
                <div class="productos-header">
                    <h2>Productos</h2>
                    <div class="productos-controls">
                        <select class="filter-select" id="filtroCategoria">
                            <option value="">Todas las categor√≠as</option>
                            <option value="ropa">Ropa</option>
                            <option value="accesorios">Accesorios</option>
                        </select>
                        
                        <select class="filter-select" id="filtroEstado">
                            <option value="">Todos los estados</option>
                            <option value="true">Activos</option>
                            <option value="false">Inactivos</option>
                        </select>
                        
                        <input type="text" class="search-input" id="buscarProducto" placeholder="Buscar productos...">
                        
                        <a href="/admin/productos/nuevo" class="btn-primary">
                            ‚ûï Nuevo Producto
                        </a>
                    </div>
                </div>

                <div class="productos-table-container">
                    <div id="loading-productos" class="loading-state" style="display: none;">
                        <div class="loading-spinner"></div>
                        <p>Cargando productos...</p>
                    </div>

                    <table class="productos-table" id="tabla-productos">
                        <thead>
                            <tr>
                                <th>Imagen</th>
                                <th>Producto</th>
                                <th>Categor√≠a</th>
                                <th>Precio</th>
                                <th>Stock</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="productos-tbody">
                            <!-- Los productos se cargar√°n aqu√≠ -->
                        </tbody>
                    </table>

                    <div id="empty-productos" class="empty-state" style="display: none;">
                        <h3>No hay productos</h3>
                        <p>No se encontraron productos con los filtros seleccionados.</p>
                        <a href="/admin/productos/nuevo" class="btn-primary">Crear primer producto</a>
                    </div>
                </div>

                <!-- Paginaci√≥n -->
                <div class="pagination" id="paginacion-container" style="display: none;">
                    <div class="pagination-info" id="pagination-info">
                        <!-- Info de paginaci√≥n -->
                    </div>
                    <div class="pagination-controls" id="pagination-controls">
                        <!-- Controles de paginaci√≥n -->
                    </div>
                </div>
            </div>

        </div>
    </main>

    <!-- Footer -->
    <footer class="admin-footer">
        <p>&copy; 2025 DATA DREAM - Yamila Sueldo. Panel de Administraci√≥n.</p>
    </footer>

    <script>
        // Variables globales
        let currentPage = 1;
        const itemsPerPage =5;
        let totalPages = 1;
        let currentFilters = {
            categoria: '',
            estado: '',
            busqueda: ''
        };

        // Elementos del DOM
        const loadingElement = document.getElementById('loading-productos');
        const tablaElement = document.getElementById('tabla-productos');
        const tbodyElement = document.getElementById('productos-tbody');
        const emptyElement = document.getElementById('empty-productos');
        const paginacionContainer = document.getElementById('paginacion-container');
        const paginationInfo = document.getElementById('pagination-info');
        const paginationControls = document.getElementById('pagination-controls');

        // Filtros
        const filtroCategoria = document.getElementById('filtroCategoria');
        const filtroEstado = document.getElementById('filtroEstado');
        const buscarInput = document.getElementById('buscarProducto');

        // Event listeners para filtros
        filtroCategoria.addEventListener('change', () => {
            console.log('üîç Filtro categor√≠a cambi√≥ a:', filtroCategoria.value);
            currentFilters.categoria = filtroCategoria.value;
            currentPage = 1;
            cargarProductos();
        });

        filtroEstado.addEventListener('change', () => {
            console.log('üîç Filtro estado cambi√≥ a:', filtroEstado.value);
            currentFilters.estado = filtroEstado.value;
            currentPage = 1;
            cargarProductos();
        });

        // Debounce para la b√∫squeda
        let searchTimeout;
        buscarInput.addEventListener('input', () => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                console.log('üîç B√∫squeda cambi√≥ a:', buscarInput.value);
                currentFilters.busqueda = buscarInput.value;
                currentPage = 1;
                cargarProductos();
            }, 500);
        });

        // Funci√≥n para cargar productos
        async function cargarProductos() {
            console.log('üì° Cargando productos...');
            console.log('üìä Filtros actuales:', currentFilters);
            console.log('üìÑ P√°gina actual:', currentPage);
            
            mostrarCargando(true);

            try {
                const params = new URLSearchParams({
                    pagina: currentPage,
                    limite: itemsPerPage
                });

                // üîß FIX: Corregir el par√°metro de categor√≠a
                if (currentFilters.categoria) {
                    params.append('categoria', currentFilters.categoria);
                }
                
                // üîß FIX: Corregir el par√°metro de estado activo
                if (currentFilters.estado !== '') {
                    // El backend espera que activo sea undefined para mostrar todos
                    if (currentFilters.estado !== 'todos') {
                        params.append('activo', currentFilters.estado);
                    }
                }
                
                // üîß FIX: Corregir el par√°metro de b√∫squeda
                if (currentFilters.busqueda) {
                    params.append('busqueda', currentFilters.busqueda);
                }

                const url = `/api/productos?${params}`;
                console.log('üåê URL de la API:', url);

                const response = await fetch(url);
                console.log('üì° Response status:', response.status);
                
                const data = await response.json();
                console.log('üì¶ Datos recibidos:', data);

                if (data.exito) {
                    mostrarProductos(data.datos.productos);
                    mostrarPaginacion(data.datos.paginacion);
                } else {
                    console.error('‚ùå Error en respuesta:', data.mensaje);
                    mostrarError(data.mensaje);
                }
            } catch (error) {
                console.error('‚ùå Error al cargar productos:', error);
                mostrarError('Error de conexi√≥n al cargar productos');
            } finally {
                mostrarCargando(false);
            }
        }

        // Funci√≥n para mostrar estado de carga
        function mostrarCargando(show) {
            loadingElement.style.display = show ? 'block' : 'none';
            tablaElement.style.display = show ? 'none' : 'table';
            emptyElement.style.display = 'none';
            paginacionContainer.style.display = show ? 'none' : 'flex';
        }

        // Funci√≥n para mostrar productos en la tabla
        function mostrarProductos(productos) {
            console.log('üìã Mostrando productos:', productos.length);
            
            if (productos.length === 0) {
                tablaElement.style.display = 'none';
                emptyElement.style.display = 'block';
                paginacionContainer.style.display = 'none';
                return;
            }

            tbodyElement.innerHTML = productos.map(producto => `
                <tr>
                    <td>
                        <img src="${producto.imagen || '/img/default-product.png'}" 
                             alt="${producto.nombre}" 
                             class="producto-imagen"
                             onerror="this.src='/img/default-product.png'">
                    </td>
                    <td>
                        <div class="producto-nombre">${producto.nombre}</div>
                        ${producto.descripcion ? `<small style="color: var(--gray-text);">${producto.descripcion.substring(0, 50)}...</small>` : ''}
                    </td>
                    <td>
                        <span class="producto-categoria">${producto.categoria}</span>
                    </td>
                    <td>
                        <span class="producto-precio">${Number(producto.precio).toLocaleString('es-AR')}</span>
                    </td>
                    <td class="producto-stock">
                        <span class="stock-badge ${getStockClass(producto.stock)}">
                            ${producto.stock} unidades
                        </span>
                    </td>
                    <td class="producto-estado">
                        <span class="estado-badge ${producto.activo ? 'estado-activo' : 'estado-inactivo'}">
                            ${producto.activo ? 'Activo' : 'Inactivo'}
                        </span>
                    </td>
                    <td>
                        <div class="producto-acciones">
                            <a href="/admin/productos/${producto.id}/editar" class="btn-secondary">
                                ‚úèÔ∏è Editar
                            </a>
                            <button class="btn-estado-${producto.id} ${producto.activo ? 'btn-danger' : 'btn-success'}" 
                                    data-producto-id="${producto.id}" 
                                    data-estado-actual="${producto.activo}">
                                ${producto.activo ? 'üóëÔ∏è Desactivar' : '‚úÖ Activar'}
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');

            // Agregar event listeners a los botones de estado
            productos.forEach(producto => {
                const btn = document.querySelector(`.btn-estado-${producto.id}`);
                if (btn) {
                    btn.addEventListener('click', function() {
                        const nuevoEstado = !producto.activo;
                        cambiarEstado(producto.id, nuevoEstado);
                    });
                }
            });

            tablaElement.style.display = 'table';
            emptyElement.style.display = 'none';
        }

        // Funci√≥n para obtener clase CSS seg√∫n el stock
        function getStockClass(stock) {
            if (stock >= 20) return 'stock-high';
            if (stock >= 5) return 'stock-medium';
            return 'stock-low';
        }

        // üîß FIX: Funci√≥n mejorada para mostrar paginaci√≥n
        function mostrarPaginacion(paginacion) {
            console.log('üìÑ Configurando paginaci√≥n:', paginacion);
            
            if (!paginacion || paginacion.totalPaginas <= 1) {
                paginacionContainer.style.display = 'none';
                return;
            }

            totalPages = paginacion.totalPaginas;
            currentPage = paginacion.paginaActual;

            // Informaci√≥n de paginaci√≥n
            const inicio = ((currentPage - 1) * itemsPerPage) + 1;
            const fin = Math.min(currentPage * itemsPerPage, paginacion.totalElementos);
            
            paginationInfo.textContent = 
                `Mostrando ${inicio} - ${fin} de ${paginacion.totalElementos} productos`;

            // Controles de paginaci√≥n
            let controls = '';

            // Bot√≥n anterior
            if (paginacion.tieneAnterior) {
                controls += `
                    <button class="pagination-btn btn-anterior" data-pagina="${currentPage - 1}">
                        ‚Üê Anterior
                    </button>
                `;
            } else {
                controls += `
                    <button class="pagination-btn disabled" disabled>
                        ‚Üê Anterior
                    </button>
                `;
            }

            // N√∫meros de p√°gina (simplificado)
            for (let i = 1; i <= totalPages; i++) {
                if (i === currentPage) {
                    controls += `
                        <button class="pagination-btn active">
                            ${i}
                        </button>
                    `;
                } else {
                    controls += `
                        <button class="pagination-btn btn-pagina" data-pagina="${i}">
                            ${i}
                        </button>
                    `;
                }
            }

            // Bot√≥n siguiente
            if (paginacion.tieneSiguiente) {
                controls += `
                    <button class="pagination-btn btn-siguiente" data-pagina="${currentPage + 1}">
                        Siguiente ‚Üí
                    </button>
                `;
            } else {
                controls += `
                    <button class="pagination-btn disabled" disabled>
                        Siguiente ‚Üí
                    </button>
                `;
            }

            paginationControls.innerHTML = controls;

            // Agregar event listeners a los botones de paginaci√≥n
            document.querySelectorAll('.btn-pagina, .btn-anterior, .btn-siguiente').forEach(btn => {
                btn.addEventListener('click', function() {
                    const nuevaPagina = parseInt(this.dataset.pagina);
                    cambiarPagina(nuevaPagina);
                });
            });

            paginacionContainer.style.display = 'flex';
        }

        // üîß FIX: Funci√≥n mejorada para cambiar p√°gina
        function cambiarPagina(nuevaPagina) {
            console.log('üìÑ Cambiando a p√°gina:', nuevaPagina);
            
            if (nuevaPagina >= 1 && nuevaPagina <= totalPages && nuevaPagina !== currentPage) {
                currentPage = nuevaPagina;
                cargarProductos();
            } else {
                console.log('‚ùå P√°gina inv√°lida:', nuevaPagina);
            }
        }

        // üîß FIX: Funci√≥n corregida para cambiar estado del producto
        async function cambiarEstado(productoId, nuevoEstado) {
            console.log('üîÑ Cambiando estado del producto:', productoId, 'a:', nuevoEstado);
            
            const accion = nuevoEstado ? 'activar' : 'desactivar';
            
            if (!confirm(`¬øEst√°s seguro de que deseas ${accion} este producto?`)) {
                return;
            }

            try {
                // ‚úÖ Usar el endpoint correcto que existe en tu backend
                const response = await fetch(`/api/productos/${productoId}/alternar`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                    // No necesitas body porque alternar() cambia autom√°ticamente el estado
                });

                console.log('üì° Response status cambio estado:', response.status);
                const data = await response.json();
                console.log('üì¶ Respuesta cambio estado:', data);

                if (data.exito) {
                    cargarProductos(); // Recargar la tabla
                    alert(data.mensaje); // Usar el mensaje del servidor
                } else {
                    alert('Error: ' + data.mensaje);
                }
            } catch (error) {
                console.error('‚ùå Error al cambiar estado:', error);
                alert('Error de conexi√≥n al cambiar el estado del producto');
            }
        }

        // Funci√≥n para mostrar errores
        function mostrarError(mensaje) {
            console.error('‚ùå Mostrando error:', mensaje);
            
            tbodyElement.innerHTML = `
                <tr>
                    <td colspan="7" style="text-align: center; color: var(--error); padding: 2rem;">
                        <strong>Error:</strong> ${mensaje}
                        <br><br>
                        <button onclick="cargarProductos()" class="btn-primary">Reintentar</button>
                    </td>
                </tr>
            `;
            paginacionContainer.style.display = 'none';
        }

        // Cargar productos al cargar la p√°gina
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üöÄ Iniciando dashboard...');
            cargarProductos();
        });
    </script>
</body>
</html>